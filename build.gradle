plugins {
    id 'java'
    id 'application'
}

repositories {
    jcenter()
}

// Configure the application plugin
application {
    // Default main class for the application plugin
    mainClass = 'com.dist.cmd.BrokerApp'
}

dependencies {
    implementation 'org.apache.zookeeper:zookeeper:3.5.5'
    implementation 'com.101tec:zkclient:0.11'
    implementation "com.fasterxml.jackson.core:jackson-core:2.11.3"
    implementation "com.fasterxml.jackson.core:jackson-databind:2.11.3"
    implementation "com.fasterxml.jackson.dataformat:jackson-dataformat-csv:2.11.3"
    implementation "com.fasterxml.jackson.dataformat:jackson-dataformat-cbor:2.11.3"
    implementation "com.fasterxml.jackson.datatype:jackson-datatype-jdk8:2.11.3"
    implementation "com.fasterxml.jackson.jaxrs:jackson-jaxrs-json-provider:2.11.3"
    // https://mvnrepository.com/artifact/com.fasterxml.jackson.module/jackson-module-parameter-names
    implementation group: 'com.fasterxml.jackson.module', name: 'jackson-module-parameter-names', version: '2.11.3'
    implementation group: 'org.apache.logging.log4j', name: 'log4j-api', version: '2.8.2'
    implementation group: 'org.apache.logging.log4j', name: 'log4j-core', version: '2.8.2'
    // Add your dependencies here
    testImplementation 'junit:junit:4.8.2'
}

test {
    minHeapSize = "2g" // initial heap size
    maxHeapSize = "2g" // maximum heap size
    maxParallelForks = 4
    //FIXME: Running multiple tests concurrently under load fails many tests with timeout.
    //Kafka seemed to have similar issue. For now limiting the maxParallelForks
    //https://issues.apache.org/jira/browse/KAFKA-2613
    jvmArgs '--illegal-access=permit'

}

compileJava {
    //For jackson to use property based constructor
    options.compilerArgs << '-parameters'
}

// Task to run BrokerApp
task runBroker(type: JavaExec) {
    group = 'application'
    description = 'Run the BrokerApp'
    mainClass = 'com.dist.cmd.BrokerApp'
    classpath = sourceSets.main.runtimeClasspath
    if (project.hasProperty('args')) {
        args project.args.split('\\s+')
    }
}

// Task to run TopicCommandApp
task runTopicCommand(type: JavaExec) {
    group = 'application'
    description = 'Run the TopicCommandApp'
    mainClass = 'com.dist.cmd.TopicCommandApp'
    classpath = sourceSets.main.runtimeClasspath
    if (project.hasProperty('args')) {
        args project.args.split('\\s+')
    }
}

// Task to run BrokerApp with specific arguments
task runBroker1(type: JavaExec) {
    group = 'demo'
    description = 'Run Broker 1 (localhost:2181 1)'
    mainClass = 'com.dist.cmd.BrokerApp'
    classpath = sourceSets.main.runtimeClasspath
    args 'localhost:2181', '1'
}

task runBroker2(type: JavaExec) {
    group = 'demo'
    description = 'Run Broker 2 (localhost:2181 2)'
    mainClass = 'com.dist.cmd.BrokerApp'
    classpath = sourceSets.main.runtimeClasspath
    args 'localhost:2181', '2'
}

task runBroker3(type: JavaExec) {
    group = 'demo'
    description = 'Run Broker 3 (localhost:2181 3)'
    mainClass = 'com.dist.cmd.BrokerApp'
    classpath = sourceSets.main.runtimeClasspath
    args 'localhost:2181', '3'
}

// Task to create a test topic
task createTestTopic(type: JavaExec) {
    group = 'demo'
    description = 'Create test topic (localhost:2181 createTopic test-topic 3 2)'
    mainClass = 'com.dist.cmd.TopicCommandApp'
    classpath = sourceSets.main.runtimeClasspath
    args 'localhost:2181', 'createTopic', 'test-topic', '3', '2'
}

// Task to list topics
task listTopics(type: JavaExec) {
    group = 'demo'
    description = 'List all topics (localhost:2181 listTopics)'
    mainClass = 'com.dist.cmd.TopicCommandApp'
    classpath = sourceSets.main.runtimeClasspath
    args 'localhost:2181', 'listTopics'
}

// Task to list brokers
task listBrokers(type: JavaExec) {
    group = 'demo'
    description = 'List all brokers (localhost:2181 listBrokers)'
    mainClass = 'com.dist.cmd.TopicCommandApp'
    classpath = sourceSets.main.runtimeClasspath
    args 'localhost:2181', 'listBrokers'
}